model Board {
  id          String    @id @default(uuid())
  title       String    @default("")
  column_index Int      @default(0)
  color       String?   @default("#fff")
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  cards       Card[]
  projectId   String
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Card {
  id                String    @id @default(uuid())
  title             String
  description       String?
  content           String    
  is_complete       Boolean   @default(false)
  column_index      Int
  row_index         Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  sub_task          SubTask[]
  labels            Labels[]
  assignees         CardAssignees[]
  comments          Comment[]
  attachment        Attachment[]
  boardId           String
  board             Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model CardAssignees {
  id        String     @id @default(uuid())
  cardId    String
  card      Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubTask {
  id                String     @id @default(uuid())
  title             String
  content           String     @db.Text
  is_complete       Boolean    @default(false)
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  status            TaskStatus @default(INPROGRESS)
  cardId            String
  card              Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Labels {
  id                String       @id @default(uuid())
  name              String
  color             String
  cardId            String
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  card              Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Attachment {
  id                  String         @id @default(uuid())
  path                String
  name                String?
  type                AttachmentType
  commentId           String?
  comment             Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  cardId              String?
  card                Card?          @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Comment {
  id                    String       @id @default(uuid())
  content               String
  authorId              String
  cardId                String
  attachments           Attachment[]
  card                  Card         @relation(fields: [cardId], references: [id], onDelete: Cascade)
  author                User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt             DateTime     @default(now())
  updateAt              DateTime     @updatedAt
}
