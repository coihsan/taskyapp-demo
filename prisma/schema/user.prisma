model User {
  id             String          @id @default(uuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  username       String?         @unique
  bio            String?         @db.Text
  preferences    String?
  password       String?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  notification   Notification[]
  permissions    Permissions[]
  status_account Status          @default(ACTIVE)
  user_workspace UserWorkspace[]
  teams          UserTeams[]
  comments        Comment[]
  cards             CardAssignees[]
  accounts       Account[]
  sessions       Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Permissions {
  id          String    @id @default(uuid())
  email  String
  userId      String
  access      Boolean
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([email])
}
